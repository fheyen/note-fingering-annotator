{"version":3,"sources":["components/Annotator.jsx","App.js","index.js"],"names":["App","props","download","text","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","updateFinger","noteIndex","finger","fingers","state","newFingers","setState","downloadFingering","JSON","stringify","prevProps","prevState","notes","this","Array","length","fill","className","onClick","map","d","i","title","toString","Midi","getMidiNoteByNr","pitch","label","undefined","string","fret","start","toFixed","end","type","placeholder","defaultValue","isNaN","onChange","e","target","value","PureComponent","loadMusicXml","fr","FileReader","onload","xmlDoc","DOMParser","parseFromString","result","parts","preprocessMusicXmlData","noteObjs","noteTracks","selectedTrack","files","name","readAsText","loadFingering","parsed","parse","handleSelectTrack","index","onResize","viewSize","outerWidth","Math","floor","window","innerWidth","outerHeight","innerHeight","addEventListener","source","getElementById","_this","MidiParser","obj","preprocessMidiFileData","alert","s","id","accept","href","icon","faGithub","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a73eae0a.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport '../style/Annotator.css';\nimport { Midi } from 'musicvis-lib';\n\n/**\n * TODO: show chords\n */\nexport default class App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fingers: []\n        };\n        this.fingers = [\n            'right thumb',\n            'right index',\n            'right middle',\n            'right ring',\n            'right little',\n            'left thumb',\n            'left index',\n            'left middle',\n            'left ring',\n            'left little'\n        ];\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.notes !== this.props.notes) {\n            this.setState({\n                fingers: new Array(this.props.notes.length).fill(null)\n            });\n        }\n        if (prevProps.fingers !== this.props.fingers) {\n            this.setState({\n                fingers: this.props.fingers\n            });\n        }\n    }\n\n    download = (text, fileName) => {\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    updateFinger = (noteIndex, finger) => {\n        const { fingers } = this.state;\n        const newFingers = [...fingers];\n        newFingers[noteIndex] = finger;\n        this.setState({\n            fingers: newFingers\n        });\n    }\n\n    downloadFingering = () => {\n        const { fileName } = this.props;\n        const { fingers } = this.state;\n        const text = JSON.stringify(fingers);\n        this.download(text, `${fileName}.json`);\n    }\n\n    render() {\n        const { notes } = this.props;\n        const { fingers } = this.state;\n        return (\n            <div className='Annotator'>\n                <button\n                    onClick={this.downloadFingering}\n                >\n                    Download\n                </button>\n                <div className='notes'>\n                    {notes.map((d, i) => (\n                        <div\n                            key={d.toString()}\n                            title={d.toString()}\n                            className='note'\n                        >\n                            <div>{Midi.getMidiNoteByNr(d.pitch).label} {d.pitch}</div>\n                            {d.string !== undefined && d.fret !== undefined &&\n                                <div>String: {d.string} Fret: {d.fret}</div>\n                            }\n                            <div>Time: {d.start.toFixed(1)} - {d.end.toFixed(1)}</div>\n                            <div>\n                                <input\n                                    type='text'\n                                    placeholder='Insert finger number...'\n                                    defaultValue={isNaN(+fingers[i]) ? null : fingers[i]}\n                                    onChange={e => this.updateFinger(i, +e.target.value)}\n                                />\n                            </div>\n                            <div>\n                                {\n                                    isNaN(+fingers[i]) ?\n                                        <span className='missing'>missing</span>\n                                        : <span className='finger'>{this.fingers[fingers[i]]}</span>\n                                }\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './style/App.css';\nimport MidiParser from 'midi-parser-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { preprocessMidiFileData, preprocessMusicXmlData } from 'musicvis-lib';\nimport Annotator from './components/Annotator';\n\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            noteTracks: [],\n            notes: [],\n            selectedTrack: 0,\n            fileName: '',\n            fingers: null\n        };\n    }\n\n    componentDidMount() {\n        // Scale layout to current screen size\n        window.addEventListener('resize', this.onResize, false);\n        this.onResize();\n\n        // select the INPUT element that will handle\n        // the file selection.\n        let source = document.getElementById('filereader');\n        // provide the File source and a callback function\n        const _this = this;\n        MidiParser.parse(source, function (obj) {\n            try {\n                const parsed = preprocessMidiFileData(obj);\n                const parts = parsed.parts.map(d => d.noteObjs);\n                _this.setState({\n                    noteTracks: parts,\n                    selectedTrack: 0,\n                    notes: parts[0],\n                    fileName: source.files[0].name,\n                    fingers: null\n                });\n            } catch (e) {\n                alert('Invalid MIDI file or wrong format!');\n            }\n        });\n    }\n\n    loadMusicXml = (e) => {\n        const fr = new FileReader();\n        fr.onload = () => {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(fr.result, 'text/xml');\n            const parsed = preprocessMusicXmlData(xmlDoc);\n            const parts = parsed.parts.map(d => d.noteObjs);\n            this.setState({\n                noteTracks: parts,\n                selectedTrack: 0,\n                notes: parts[0],\n                fileName: e.target.files[0].name,\n                fingers: null\n            });\n        }\n        fr.readAsText(e.target.files[0]);\n    }\n\n    loadFingering = (e) => {\n        const fr = new FileReader();\n        fr.onload = () => {\n            const parsed = JSON.parse(fr.result);\n            this.setState({\n                fingers: parsed\n            });\n        }\n        fr.readAsText(e.target.files[0]);\n    }\n\n    handleSelectTrack = (e) => {\n        const index = +e.target.value;\n        this.setState({\n            selectedTrack: index,\n            notes: this.state.noteTracks[index]\n        })\n    }\n\n    /**\n     * Updates the size state when the window size changes\n     * so views can react and redraw\n     */\n    onResize = () => {\n        this.setState({\n            viewSize: {\n                outerWidth: Math.floor(window.innerWidth - 20),\n                outerHeight: Math.floor(window.innerHeight - 200)\n            }\n        });\n    }\n\n    render() {\n        const s = this.state;\n        return (\n            <div className={`App dark`} >\n                <div className='fileSelection'>\n                    <label>\n                        Select MIDI file\n                        <input\n                            type='file'\n                            id='filereader'\n                            accept='.mid,.midi'\n                        />\n                    </label>\n                    <label>\n                        Select MusicXML file\n                        <input\n                            type='file'\n                            accept='.xml,.musicxml'\n                            onChange={this.loadMusicXml}\n                        />\n                    </label>\n                    <label>\n                        Select a fingering file\n                        <input\n                            type='file'\n                            accept='.json'\n                            onChange={this.loadFingering}\n                        />\n                    </label>\n                    {s.noteTracks.length > 1 &&\n                        <label>\n                            Select a track\n                            <select\n                                onChange={this.handleSelectTrack}\n                                defaultValue={s.selectedTrack}\n                            >\n                                {s.noteTracks.map((d, i) => (\n                                    <option key={i} value={i}>\n                                        Track {i} ({d.length} notes)\n                                    </option>\n                                ))}\n                            </select>\n                        </label>\n                    }\n                </div>\n                <div>\n                    <Annotator\n                        notes={s.notes}\n                        fileName={s.fileName}\n                        fingers={s.fingers}\n                    />\n                </div>\n                <div className='githubLink'>\n                    <a href='https://github.com/fheyen/note-fingering-annotator'>\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/note-fingering-annotator\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}