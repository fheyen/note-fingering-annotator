{"version":3,"sources":["components/Annotator.jsx","App.js","index.js"],"names":["App","props","download","text","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","updateFinger","noteIndex","finger","fingers","state","newFingers","setState","downloadFingering","JSON","stringify","prevProps","prevState","notes","this","Array","length","fill","className","onClick","map","d","i","Midi","getMidiNoteByNr","pitch","label","undefined","string","fret","start","toFixed","end","type","placeholder","onChange","e","target","value","PureComponent","loadMusicXml","fr","FileReader","onload","xmlDoc","DOMParser","parseFromString","result","parts","preprocessMusicXmlData","noteObjs","noteTracks","selectedTrack","files","name","readAsText","handleSelectTrack","index","onResize","viewSize","outerWidth","Math","floor","window","innerWidth","outerHeight","innerHeight","addEventListener","source","getElementById","_this","MidiParser","parse","obj","preprocessMidiFileData","alert","s","id","accept","defaultValue","href","icon","faGithub","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5bad47d4.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport '../style/Annotator.css';\nimport { Midi } from 'musicvis-lib';\n\n/**\n * TODO: show chords\n */\nexport default class App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fingers: []\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.notes !== this.props.notes) {\n            this.setState({\n                fingers: new Array(this.props.notes.length).fill(null)\n            });\n        }\n    }\n\n    download = (text, fileName) => {\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    updateFinger = (noteIndex, finger) => {\n        const { fingers } = this.state;\n        const newFingers = [...fingers];\n        newFingers[noteIndex] = finger;\n        this.setState({\n            fingers: newFingers\n        });\n    }\n\n    downloadFingering = () => {\n        const { fileName } = this.props;\n        const { fingers } = this.state;\n        const text = JSON.stringify(fingers);\n        this.download(text, `${fileName}.json`);\n    }\n\n    render() {\n        const { notes } = this.props;\n        return (\n            <div className='Annotator'>\n                <button\n                    onClick={this.downloadFingering}\n                >\n                    Download\n                </button>\n                <div className='notes'>\n                    {notes.map((d, i) => (\n                        <div className='note'>\n                            <div>{Midi.getMidiNoteByNr(d.pitch).label} {d.pitch}</div>\n                            {d.string !== undefined && d.fret !== undefined &&\n                                <div>String: {d.string} Fret: {d.fret}</div>\n                            }\n                            <div>Time: {d.start.toFixed(1)} - {d.end.toFixed(1)}</div>\n                            <div>\n                                <input\n                                    type='text'\n                                    placeholder='Insert finger number...'\n                                    onChange={e => this.updateFinger(i, +e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './style/App.css';\nimport MidiParser from 'midi-parser-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { preprocessMidiFileData, preprocessMusicXmlData } from 'musicvis-lib';\nimport Annotator from './components/Annotator';\n\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewSize: {\n                outerWidth: 800,\n                outerHeight: 600\n            },\n            noteTracks: [],\n            notes: [],\n            selectedTrack: 0,\n            fileName: ''\n        };\n    }\n\n    componentDidMount() {\n        // Scale layout to current screen size\n        window.addEventListener('resize', this.onResize, false);\n        this.onResize();\n\n        // select the INPUT element that will handle\n        // the file selection.\n        let source = document.getElementById('filereader');\n        // provide the File source and a callback function\n        const _this = this;\n        MidiParser.parse(source, function (obj) {\n            try {\n                const parsed = preprocessMidiFileData(obj);\n                const parts = parsed.parts.map(d => d.noteObjs);\n                _this.setState({\n                    noteTracks: parts,\n                    selectedTrack: 0,\n                    notes: parts[0],\n                    fileName: source.files[0].name\n                });\n            } catch (e) {\n                alert('Invalid MIDI file or wrong format!');\n            }\n        });\n    }\n\n    loadMusicXml = (e) => {\n        const fr = new FileReader();\n        fr.onload = () => {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(fr.result, 'text/xml');\n            const parsed = preprocessMusicXmlData(xmlDoc);\n            const parts = parsed.parts.map(d => d.noteObjs);\n            this.setState({\n                noteTracks: parts,\n                selectedTrack: 0,\n                notes: parts[0],\n                fileName: e.target.files[0].name\n            });\n        }\n\n        fr.readAsText(e.target.files[0]);\n    }\n\n    handleSelectTrack = (e) => {\n        const index = +e.target.value;\n        this.setState({\n            selectedTrack: index,\n            notes: this.state.noteTracks[index]\n        })\n    }\n\n    /**\n     * Updates the size state when the window size changes\n     * so views can react and redraw\n     */\n    onResize = () => {\n        this.setState({\n            viewSize: {\n                outerWidth: Math.floor(window.innerWidth - 20),\n                outerHeight: Math.floor(window.innerHeight - 200)\n            }\n        });\n    }\n\n    render() {\n        const s = this.state;\n        return (\n            <div className={`App dark`} >\n                <div className='fileSelection'>\n                    <label>\n                        Select MIDI file\n                        <input\n                            className='fileInput'\n                            type='file'\n                            id='filereader'\n                            accept='.mid,.midi'\n                        />\n                    </label>\n                    <label>\n                        Select MusicXML file\n                        <input\n                            className='fileInput'\n                            type='file'\n                            accept='.xml,.musicxml'\n                            onChange={this.loadMusicXml}\n                        />\n                    </label>\n                    <label>\n                        Select a track\n                        <select\n                            onChange={this.handleSelectTrack}\n                            defaultValue={s.selectedTrack}\n                        >\n                            {s.noteTracks.map((d, i) => (\n                                <option key={i} value={i}>\n                                    Track {i} ({d.length} notes)\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                </div>\n                <div>\n                    <Annotator\n                        notes={s.notes}\n                        fileName={s.fileName}\n                    />\n                </div>\n                <div className='githubLink'>\n                    <a href='https://github.com/fheyen/note-fingering-annotator'>\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/note-fingering-annotator\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}